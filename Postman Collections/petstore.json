{
	"info": {
		"_postman_id": "0c369697-c6d1-49b4-bfed-a259c211429a",
		"name": "Swagger Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Run",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f9ef083a-6f6f-4db2-9ec6-ce6e0a28c75c",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7d4a5694-b48e-406f-bed0-4f6db14ce351",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "e689b919-565a-4b70-9845-0c0784f96956",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 0,\n  \"username\": \"{{username}}\",\n  \"firstName\": \"{{firstName}}\",\n  \"lastName\": \"{{lastName}}\",\n  \"email\": \"{{email}}\",\n  \"password\": \"{{password}}\",\n  \"phone\": \"{{phone}}\",\n  \"userStatus\": 0\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/user",
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"id": "8533bf53-7900-4ee7-b270-bb8f2e84eef2",
							"name": "successful operation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}/user"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76fa549d-5157-450f-a208-6d9101337dfb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Data check\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(pm.globals.get(\"username\"));\r",
									"    pm.expect(jsonData.firstName).to.eql(pm.globals.get(\"firstName\"));\r",
									"    pm.expect(jsonData.lastName).to.eql(pm.globals.get(\"lastName\"));\r",
									"    pm.expect(jsonData.email).to.eql(pm.globals.get(\"email\"));\r",
									"    pm.expect(jsonData.password).to.eql(pm.globals.get(\"password\"));\r",
									"    pm.expect(jsonData.phone).to.eql(pm.globals.get(\"phone\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "5483b0a6-32d0-4e74-9667-65788ccecc10",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": "{{baseUrl}}/user/{{username}}"
					},
					"response": [
						{
							"id": "06be31b9-ccf4-41f3-959f-d9c80ac6e8cd",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n  \"id\": \"<long>\",\n  \"username\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"phone\": \"<string>\",\n  \"userStatus\": \"<integer>\"\n}"
						},
						{
							"id": "3e755b7c-6dad-48cf-8408-ca11eda8990a",
							"name": "User not found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "66cbec45-6445-45e4-a9e5-db59b097e2cd",
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1babad71-3bb7-44e0-8eee-410862ba5fe8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check login success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.contain(\"logged in user session:\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "9c17afeb-02a1-446f-be96-051b71195a86",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username={{username}}&password={{password}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{username}}",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": [
						{
							"id": "64f14ddb-de87-4ed6-8f29-c6d0fd2ed837",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"description": "(Required) The user name for login",
											"key": "username",
											"value": "<string>"
										},
										{
											"description": "(Required) The password for login in clear text",
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"disabled": false,
									"description": {
										"content": "date in UTC when token expires",
										"type": "text/plain"
									},
									"key": "X-Expires-After",
									"value": "<dateTime>"
								},
								{
									"disabled": false,
									"description": {
										"content": "calls per hour allowed by the user",
										"type": "text/plain"
									},
									"key": "X-Rate-Limit",
									"value": "<integer>"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "<string>"
						},
						{
							"id": "95c71456-744f-480e-a503-c261e0572e7a",
							"name": "Invalid username/password supplied",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/login?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"login"
									],
									"query": [
										{
											"description": "(Required) The user name for login",
											"key": "username",
											"value": "<string>"
										},
										{
											"description": "(Required) The password for login in clear text",
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Finds Pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "70114bc9-8f2a-4d0b-81f2-cd3b0476f975",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"class Pet {\r",
									"  constructor(id, name) {\r",
									"    this.id = id;\r",
									"    this.name = name;\r",
									"  }\r",
									"\r",
									"  compareTo(anotherPet) {\r",
									"      return this.name === anotherPet.name;\r",
									"  }\r",
									"}\r",
									"\r",
									"var petCollection = [];\r",
									"\r",
									"pm.test(\"List sold pets\", function () {\r",
									"    console.log(\"Listing sold pets\");\r",
									"    var petArr = pm.response.json();\r",
									"    petCollection = petArr.map(pet => new Pet(pet.id, pet.name));\r",
									"    petCollection.forEach(console.log);\r",
									"    console.log(\"*******************************\");\r",
									"});\r",
									"\r",
									"pm.test(\"List cloned sold pets\", function () {\r",
									"    console.log(\"Listing repeated sold pets by name\");\r",
									"    var checkedPets = {};\r",
									"    petCollection.forEach(pet1 => {\r",
									"        var count = 0;\r",
									"        if (checkedPets.hasOwnProperty(pet1.name)) return;\r",
									"        petCollection.forEach(pet2 => {\r",
									"            if (pet1 !== pet2) {\r",
									"                count += pet1.compareTo(pet2) ? 1 : 0;\r",
									"            }\r",
									"        });\r",
									"        checkedPets[pet1.name] = count;\r",
									"    });\r",
									"    console.log(JSON.stringify(checkedPets));\r",
									"    console.log(\"*******************************\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "12a8099b-45c8-4e20-9ab7-71c51cee4242",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": {
								"scope": "read:pets write:pets",
								"authUrl": "https://petstore.swagger.io/oauth/authorize",
								"grant_type": "implicit"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status={{status}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "{{status}}",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": [
						{
							"id": "9faaadd1-5438-44c3-a389-14fd353f1602",
							"name": "Invalid status value",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"description": "(Required) Status values that need to be considered for filter",
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "ac633bc9-8b1e-43e9-8307-efa9982a47e2",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: oauth2",
										"key": "Authorization",
										"value": "<token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/pet/findByStatus?status=available",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pet",
										"findByStatus"
									],
									"query": [
										{
											"description": "(Required) Status values that need to be considered for filter",
											"key": "status",
											"value": "available"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "[\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  },\n  {\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n      \"<string>\",\n      \"<string>\"\n    ],\n    \"id\": \"<long>\",\n    \"category\": {\n      \"id\": \"<long>\",\n      \"name\": \"<string>\"\n    },\n    \"tags\": [\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      },\n      {\n        \"id\": \"<long>\",\n        \"name\": \"<string>\"\n      }\n    ],\n    \"status\": \"sold\"\n  }\n]"
						}
					]
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0bf271ab-1419-4a8c-b9ab-a1f1923e880c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Check logout success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"ok\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "f1b73ebd-ad3e-4771-921f-e5a15e2630f1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/user/logout"
					},
					"response": [
						{
							"id": "c4574141-c693-45ae-9adb-65b8a29a26b7",
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": "{{baseUrl}}/user/logout"
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cb44905-133c-4efe-a6b5-d583b5139f9e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check logout success\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(pm.globals.get(\"username\"));\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"_postman_id": "5925df46-4a68-4c9d-8eae-d1577e0f9395",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{baseUrl}}/user/{{username}}",
						"description": "This can only be done by the logged in user."
					},
					"response": [
						{
							"id": "6eb066bf-73ae-4532-9292-c76a4dd4044c",
							"name": "Invalid username supplied",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						},
						{
							"id": "b6c1ef50-5c7d-4298-b2ec-f641f6ae5f61",
							"name": "User not found",
							"originalRequest": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/user/:username",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										":username"
									],
									"variable": [
										{
											"key": "username"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				}
			],
			"_postman_id": "0bff38c9-7386-451a-8a0a-c1f33c8b0f29"
		}
	],
	"variable": [
		{
			"id": "af13d219-eb51-41c7-9cdc-444273aec526",
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2",
			"type": "string"
		}
	]
}